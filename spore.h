#ifndef SPORE_H
# define SPORE_H

#include "SPIKE.h"
#include "tilemap-engine.h"

#define MOVE_DELAY 10

static const __flash uint8_t TILES[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xfc, 0xfa, 0xf5, 0x0b, 0xe5, 0x6b, 0xe5, 0xcb, 
    0xe5, 0xcb, 0xe5, 0xcb, 0xe5, 0xcb, 0xa5, 0xcb, 
    0xa5, 0x4b, 0xa5, 0x0b, 0x55, 0xab, 0x55, 0xfe, 
    0xef, 0xef, 0xc6, 0x00, 0x55, 0xaa, 0x55, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0xff, 0xdf, 0xf6, 0xff, 
    0xff, 0xfb, 0xdd, 0xff, 0xfb, 0xff, 0xef, 0xff, 
    0xff, 0xff, 0xaa, 0x00, 0x55, 0xaa, 0x55, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0xc7, 0xeb, 0xef, 0xcf, 
    0x3f, 0x5f, 0xaf, 0xd0, 0xef, 0xef, 0xee, 0xef, 
    0xef, 0xef, 0xed, 0xeb, 0xef, 0xed, 0xef, 0xef, 
    0xef, 0xef, 0xee, 0xe0, 0xd5, 0xaa, 0x55, 0x3f, 
    0xe7, 0xed, 0xe7, 0xe0, 0xe7, 0xef, 0xeb, 0xef, 
    0xe5, 0xeb, 0xc5, 0x0b, 0xc5, 0xeb, 0xa5, 0xcb, 
    0xbd, 0x42, 0xa5, 0xa5, 0xa5, 0xa5, 0x42, 0xbd, 
    0xbd, 0x42, 0x99, 0xa5, 0xa5, 0x99, 0x42, 0xff, 
    
    0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, // HUD Health (16)
    0x00, 0x18, 0x3c, 0x78, 0x78, 0x3c, 0x18, 0x00, // HUD Lives
    0x00, 0x00, 0x34, 0x24, 0x24, 0x34, 0x00, 0x00, // HUD Ammo
    0x00, 0x08, 0x14, 0x08, 0x08, 0x18, 0x00, 0x00, // HUD Keys
    
    0xff, 0x76, 0x14, 0x14, 0x14, 0x14, 0x1c, 0x08, // Door Left Closed
    0x08, 0x1c, 0x14, 0x14, 0x14, 0x14, 0x76, 0xff, // Door Right Closed
    0xff, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // Door Left  Open
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0xff, // Door Right Open
    
    
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x18, 0xbe, // Player Idle Up TL
    0x90, 0x20, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, // Player Idle Up TR
    0x00, 0x00, 0x06, 0x0f, 0x18, 0x36, 0x2d, 0x1e, // Player Idle Up BL
    0x1e, 0x2d, 0x36, 0x18, 0x0e, 0x07, 0x00, 0x00, // Player Idle Up BR
    
    0x00, 0x00, 0x00, 0x00, 0xd8, 0x68, 0x20, 0xb0, 
    0x90, 0x3e, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x06, 0x0f, 0x18, 0x36, 0x2d, 0x1e, 
    0x1e, 0x2d, 0x36, 0x58, 0x6e, 0x07, 0x00, 0x00,
    
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x18, 0xbe, 
    0x90, 0x20, 0x60, 0xd0, 0xb0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x06, 0x6f, 0x58, 0x36, 0x2d, 0x1e, 
    0x1e, 0x2d, 0x36, 0x18, 0x0e, 0x07, 0x00, 0x00, 
    
    0x00, 0x00, 0x60, 0xb0, 0xd8, 0xec, 0xac, 0x48, // Player Right
    0x90, 0x30, 0xa0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 
    0x00, 0x00, 0x06, 0x0d, 0x1b, 0x37, 0x35, 0x22, 
    0x19, 0x0c, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 
    
    0x00, 0x00, 0x60, 0xb0, 0xd8, 0xec, 0xac, 0x48, 
    0x90, 0x30, 0xe0, 0x90, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x36, 0x2d, 0x1b, 0x37, 0x35, 0x22, 
    0x19, 0x0c, 0x06, 0x03, 0x02, 0x02, 0x02, 0x00, 
    
    0x00, 0x00, 0x6c, 0xb4, 0xd8, 0xec, 0xac, 0x48, 
    0x90, 0x30, 0xa0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 
    0x00, 0x00, 0x06, 0x0d, 0x1b, 0x37, 0x35, 0x22, 
    0x19, 0x0c, 0x16, 0x19, 0x00, 0x00, 0x00, 0x00, 
    
    0x00, 0x00, 0x60, 0xf0, 0x18, 0x6c, 0xb4, 0x78, // Player Down
    0x78, 0xb4, 0x6c, 0x18, 0x70, 0xe0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x18, 0x7d, 
    0x09, 0x04, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 
        
    0x00, 0x00, 0x60, 0xf0, 0x18, 0x6c, 0xb4, 0x78, 
    0x78, 0xb4, 0x6c, 0x1a, 0x76, 0xe0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x18, 0x7d, 
    0x09, 0x04, 0x06, 0x0b, 0x0d, 0x00, 0x00, 0x00, 
    
    0x00, 0x00, 0x60, 0xf6, 0x1a, 0x6c, 0xb4, 0x78, 
    0x78, 0xb4, 0x6c, 0x18, 0x70, 0xe0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1b, 0x16, 0x04, 0x0d, 
    0x09, 0x7c, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 
    
    
    0x00, 0x80, 0x80, 0xc0, 0xc0, 0xa0, 0x30, 0x90, // Player Left
    0x48, 0xac, 0xec, 0xd8, 0xb0, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x0c, 0x19, 
    0x22, 0x35, 0x37, 0x1b, 0x0d, 0x06, 0x00, 0x00,
    
    0x00, 0x00, 0x00, 0x30, 0x90, 0xe0, 0x30, 0x90, 
    0x48, 0xac, 0xec, 0xd8, 0xb0, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x19, 0x16, 0x0c, 0x19, 
    0x22, 0x35, 0x37, 0x1b, 0x0d, 0x06, 0x00, 0x00, 
    
    0x00, 0x80, 0x80, 0xc0, 0xc0, 0xa0, 0x30, 0x90, 
    0x48, 0xac, 0xec, 0xd8, 0xb4, 0x6c, 0x00, 0x00,  
    0x00, 0x02, 0x02, 0x02, 0x03, 0x06, 0x0c, 0x19, 
    0x22, 0x35, 0x37, 0x1b, 0x2d, 0x36, 0x00, 0x00, 
    
    0x7e, 0x81, 0xb5, 0xa5, 0xa5, 0xb5, 0x81, 0x7e, // Clip pickup (72)
    0x7e, 0x81, 0x99, 0xbd, 0xbd, 0x99, 0x81, 0x7e, // Health pickup
    0x76, 0x89, 0x95, 0x89, 0x89, 0x99, 0x81, 0x7e, // Key pickup
    0x66, 0x99, 0xbd, 0x79, 0x79, 0xbd, 0x99, 0x66, // Life pickup
    
    0x00, 0x02, 0x01, 0x03, 0x01, 0x02, 0x00, 0x00, // Bullet hit UP (76)
    0x00, 0x00, 0x40, 0x80, 0xc0, 0x80, 0x40, 0x00, // Bullet hit DOWN
    0x1c, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Bullet hit LEFT
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x1c, // Bullet hit RIGHT
    0x00, 0xa0, 0xc0, 0x60, 0xc0, 0xa0, 0x00, 0x00, // Muzzle Flash UP
    0x00, 0x00, 0x05, 0x03, 0x06, 0x03, 0x05, 0x00, // Muzzle Flash DOWN
    0x36, 0x1c, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, // Muzzle Flash LEFT
    0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x1c, 0x36, // Muzzle Flash RIGHT
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xb8, 0xcc, // Monster RIGHT (84)
    0x6c, 0xac, 0x6c, 0x4c, 0x8c, 0x54, 0x0a, 0x00, 
    0x00, 0x01, 0x01, 0x01, 0x01, 0x1a, 0x3b, 0x66, 
    0x6d, 0x6a, 0x6d, 0x64, 0x63, 0x54, 0xa0, 0x00, 
    
    0x00, 0x0a, 0x54, 0x8c, 0x4c, 0x6c, 0xac, 0x6c, // Monster LEFT
    0xcc, 0xb8, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xa0, 0x54, 0x63, 0x64, 0x6d, 0x6a, 0x6d, 
    0x66, 0x3b, 0x1a, 0x01, 0x01, 0x01, 0x01, 0x00, 
};

#define HUD_HEALTH 16*8
#define HUD_LIVES 17*8
#define HUD_AMMO 18*8
#define HUD_KEYS 19*8

#define KEY_PICKUP  &TILES[74*8]
#define CLIP_PICKUP &TILES[72*8]

#define P_UP        &TILES[24*8]
#define P_RIGHT     &TILES[36*8]
#define P_DOWN      &TILES[48*8]
#define P_LEFT      &TILES[60*8]

#define B_UP        &TILES[76*8]
#define B_DOWN      &TILES[77*8]
#define B_LEFT      &TILES[78*8]
#define B_RIGHT     &TILES[79*8]

#define F_UP        &TILES[80*8]
#define F_DOWN      &TILES[81*8]
#define F_LEFT      &TILES[82*8]
#define F_RIGHT     &TILES[83*8]


#define DOOR_CLOSED   &TILES[20*8]
#define DOOR_OPEN     &TILES[22*8]


#define M_RIGHT     &TILES[84*8]
#define M_LEFT      &TILES[88*8]


typedef struct Point {
    int16_t x;
    int16_t y;
} Point;

#define MAX_DOORS 8
#define CLOSED 0
#define OPEN 1

typedef struct Mob {
    Sprite sprite;
    int16_t health;
    uint32_t attack_timer;
    uint32_t move_timer;
} Mob;

#define MAX_MOBS 6

typedef struct MobList {
    uint8_t num_mobs;
    Mob mobs[MAX_MOBS];
} MobList;

typedef struct LevelDoors {
    uint8_t num_doors;
    Point doors[];
} LevelDoors;


typedef struct Stats {
    int8_t health;
    uint8_t lives;
    uint8_t clips;
    uint8_t rounds;
    uint8_t keys;
} Stats;

#define MAX_HEALTH 12
#define CLIP_SIZE 12

#define SHOT_DELAY 95
#define SHOT_ANIM_DELAY 20

typedef struct Item {
    int16_t x;
    int16_t y;
    const __flash uint8_t* tile;
    Stats stats;
} Item;

#define MAX_ITEMS 12
#define UNCOLLECTED 0
#define COLLECTED 1
typedef struct LevelItems {
    uint8_t num_items;
    Item items[MAX_ITEMS];
} LevelItems;


static const __flash LevelDoors LEVEL_1_DOORS = {
        .num_doors = 6,
        .doors = {
            {.x=4*8+8, .y=23*8+4,},
            {.x=5*8+8, .y=27*8+4,},
            {.x=3*8+8, .y=16*8+4,},
            {.x=14*8+8, .y=15*8+4,},
            {.x=16*8+8, .y=20*8+4,},
            {.x=15*8+8, .y=30*8+4,},
        }
};

static const __flash LevelItems LEVEL_1_ITEMS = {
    .num_items=4,
    .items = {
        {.x=2*8+4, .y=32*8+4, .tile=KEY_PICKUP, .stats={.health=0, .lives=0, .clips=0, .rounds=0, .keys=1},},
        {.x=13*8+4, .y=16*8+4, .tile=KEY_PICKUP, .stats={.health=0, .lives=0, .clips=0, .rounds=0, .keys=2},},
        {.x=18*8+4, .y=33*8+4, .tile=KEY_PICKUP, .stats={.health=0, .lives=0, .clips=0, .rounds=0, .keys=1},},
        {.x=16*8+4, .y=33*8+4, .tile=CLIP_PICKUP, .stats={.health=0, .lives=0, .clips=2, .rounds=0, .keys=0},},
    }
};

static const __flash MobList LEVEL_1_MOBS = {
    .num_mobs = 1,
    .mobs = {
        {.sprite={.x=14*8, .y=32*8, .width=16, .height=16, .tile=M_RIGHT, .mask=&BLOCK_MASKS[TRANSPARENT]}, .health=6, .attack_timer=0, .move_timer=0},
    }
};

static const __flash Map LEVEL_1 = {
    .cols = 20,
    .rows = 36,
    .tileset = &TILES[0],
    .tiles = {
          1,   2,   2,   2,   2,   2,   2,  20,  21,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   2,   2,   2,   2,   2,   2,   4,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,  15,   6,   6,   6,  14,   6,   6,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   6,  14,   6,   6,   6,   6,   6,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,  10,  10,  10,  10,  10,  10,  10,   4,
          5,   0,   0,   0,   0,   0,   0,   1,   2,   2,   3,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   5,   6,   6,   7,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   5,  14,   6,   7,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   5,   6,  15,   7,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   9,  10,  10,  11,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          8,   2,   3,   0,   0,   0,   0,   0,   1,   2,   2,   2,  13,   2,   0,   0,   2,   2,   2,   4,
          5,  14,   8,   0,   0,   2,  13,   2,   4,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   7,
          5,   6,   5,   0,   0,   0,   5,  14,   7,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   7,
          5,  15,   5,   0,   0,   0,   5,  14,   7,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   7,
          5,   6,   5,   0,   0,   0,   9,  10,   4,   0,   0,   0,   8,   3,   0,   0,   0,   0,   0,   7,
          5,  15,   5,   0,   0,   0,   0,   0,   7,   0,   0,   0,   9,  12,  10,  10,   0,   0,  10,   4,
          5,   6,   5,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          5,  14,   5,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
          8,  10,  12,  10,   0,   0,  10,  10,  11,   0,   0,   0,   1,   2,   2,   3,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   6,  15,   7,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,  14,   6,   7,   0,   0,   0,   7,
          5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,  10,  10,  11,   0,   0,   0,   7,
          5,   0,   0,   1,   2,   0,   0,   2,  13,   2,   2,   2,   4,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   5,   0,   0,   0,   0,   7,  15,   6,   6,   7,   0,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   5,   0,   0,   0,   0,   7,   6,   6,   6,   9,   3,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   5,   0,   0,   0,   0,   7,  15,   6,   6,   6,   8,   2,   0,   0,   2,   2,   4,
          5,   0,   0,   5,   0,   0,   0,   0,   7,   6,   6,   6,  15,   5,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   5,   0,   0,   0,   0,   7,  15,   6,   6,   6,   5,   0,   0,   0,   0,   0,   7,
          5,   0,   0,   5,   0,   0,   0,   0,   7,   6,   6,   6,  15,   5,   0,   0,   0,   0,   0,   7,
          9,  10,  10,  12,  10,  20,  21,  10,  12,  10,  10,  10,  10,  12,  10,  10,  10,  10,  10,  11,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // Blank line to work around HUD!
      }
};

typedef enum { WALL, DOOR, MOB, PLAYER } CollisionTypes;

typedef struct collision {
    int16_t x;
    int16_t y;
    CollisionTypes collisionType;
    uint8_t index;
} collision;

void spore (void);

collision cast_to_collision(const Map __flash *lvl, int16_t x, int16_t y, int16_t dx, int16_t dy);
uint8_t collide_with_mob(uint16_t x, uint16_t y);
bool collide_with_door(uint16_t x, uint16_t y);
void collide_with_item(uint16_t x, uint16_t y);
bool check_collision(const Map __flash *lvl, uint16_t x, uint16_t y);

#endif